JWT_SECRET= saikrishnaennam





  {
    "first_name": "Alice",
    "last_name": "Johnson",
    "email": "alice.johnson@example.com",
    "mobile_no": "9876543210",
    "password": "Password123"
  },
  {
    "first_name": "Bob",
    "last_name": "Smith",
    "email": "bob.smith@example.com",
    "mobile_no": "9123456789",
    "password": "Secret456"
  },
  {
    "first_name": "Charlie",
    "last_name": "Brown",
    "email": "charlie.brown@example.com",
    "mobile_no": "9988776655",
    "password": "MyPass789"
  },
  {
    "first_name": "David",
    "last_name": "Williams",
    "email": "david.williams@example.com",
    "mobile_no": "9871234560",
    "password": "Alpha123"
  },
  {
    "first_name": "Eva",
    "last_name": "Davis",
    "email": "eva.davis@example.com",
    "mobile_no": "9765432109",
    "password": "Beta456"
  },
  {
    "first_name": "Frank",
    "last_name": "Miller",
    "email": "frank.miller@example.com",
    "mobile_no": "9654321098",
    "password": "Gamma789"
  },
  {
    "first_name": "Grace",
    "last_name": "Wilson",
    "email": "grace.wilson@example.com",
    "mobile_no": "9543210987",
    "password": "Delta123"
  },
  {
    "first_name": "Hannah",
    "last_name": "Moore",
    "email": "hannah.moore@example.com",
    "mobile_no": "9432109876",
    "password": "Epsilon456"
  },
  {
    "first_name": "Ian",
    "last_name": "Taylor",
    "email": "ian.taylor@example.com",
    "mobile_no": "9321098765",
    "password": "Zeta789"
  },
  {
    "first_name": "Jane",
    "last_name": "Anderson",
    "email": "jane.anderson@example.com",
    "mobile_no": "9210987654",
    "password": "Theta123"
  }




# // ---------------- CREATE USER ----------------
# const createUserController = async (req, res) => {
#   const valid = validateCreateUser(req.body);

#   if (!valid) {
#     const messages = validateCreateUser.errors.map((err) => {
#       if (err.keyword === "format" && err.params.format === "email") {
#         return "Invalid email format.";
#       }
#       if (err.keyword === "pattern" && err.instancePath === "/mobile_no") {
#         return "Mobile number must be 10 digits.";
#       }
#       if (err.keyword === "minLength") {
#         return `${err.instancePath.replace("/", "")} must be at least ${
#           err.params.limit
#         } characters long.`;
#       }
#       if (err.keyword === "required") {
#         return `${err.params.missingProperty} is required.`;
#       }
#       return `${err.instancePath.replace("/", "")} ${err.message}`;
#     });

#     return res.status(400).json({
#       success: false,
#       message: "Validation failed. Please check your input.",
#       errors: messages,
#     });
#   }

#   try {
#     if (req.body.email) req.body.email = req.body.email.toLowerCase();

#     if (req.body.password) {
#       const bcrypt = require("bcryptjs");
#       req.body.password = await bcrypt.hash(req.body.password, 6);
#     }

#     const user = await Users.create(req.body);

#     return res.status(201).json({
#       success: true,
#       message: "User created successfully",
#       data: {
#         id: user.id,
#         first_name: user.first_name,
#         last_name: user.last_name,
#         email: user.email,
#         mobile_no: user.mobile_no,
#       },
#     });
#   } catch (e) {
#     if (e.name === "SequelizeUniqueConstraintError") {
#       return res.status(400).json({
#         success: false,
#         message: "Email or mobile number already exists.",
#       });
#     }

#     return res.status(500).json({
#       success: false,
#       message: "Something went wrong. Please try again later.",
#     });
#   }
# };
